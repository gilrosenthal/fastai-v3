import aiohttp
import asyncio
import uvicorn
from fastai import *
from fastai.vision import *
from io import BytesIO
from starlette.applications import Starlette
from starlette.middleware.cors import CORSMiddleware
from starlette.responses import HTMLResponse, JSONResponse
from starlette.staticfiles import StaticFiles

export_file_url = 'https://drive.google.com/uc?export=download&id=1dEGo1TTsur2C1phJ2B6eD6zDdg8O3O5G'
export_file_name = 'export.pkl'

classes = ['2038',
 '2039',
 '2335',
 '2336',
 '2338',
 '2339',
 '2340',
 '2341',
 '2342',
 '2345',
 '2346',
 '2350',
 '2351',
 '2352',
 '2357',
 '2362',
 '2376',
 '2377',
 '2397',
 '2400',
 '2401',
 '2408',
 '2409',
 '2412',
 '2413',
 '2415',
 '2417',
 '2418',
 '2419',
 '2420',
 '2421',
 '2423',
 '2429',
 '2430',
 '2431',
 '2432',
 '2433',
 '2434',
 '2435',
 '2436',
 '2437',
 '2439',
 '2440',
 '2441',
 '2443',
 '2444',
 '2445',
 '2447',
 '2449',
 '2450',
 '2452',
 '2453',
 '2454',
 '2458',
 '2460',
 '2462',
 '2463',
 '2464',
 '2465',
 '2466',
 '2467',
 '2468',
 '2470',
 '2475',
 '2476',
 '2479',
 '2483',
 '2486',
 '2488',
 '2489',
 '2490',
 '2494',
 '2495',
 '2496',
 '2497',
 '2498',
 '2507',
 '2508',
 '2512',
 '2515',
 '2516',
 '2518',
 '2524',
 '2525',
 '2526',
 '2527',
 '2528',
 '2529',
 '2530',
 '2531',
 '2532',
 '2533',
 '2534',
 '2537',
 '2538',
 '2539',
 '2540',
 '2541',
 '2542',
 '2543',
 '2544',
 '2545',
 '2546',
 '2547',
 '2548',
 '2549',
 '2550',
 '2551',
 '2554',
 '2555',
 '2560',
 '2561',
 '2562',
 '2563',
 '2564',
 '2566',
 '2569',
 '2570',
 '2571',
 '2572',
 '2573',
 '2577',
 '2578',
 '2583',
 '2584',
 '2585',
 '2586',
 '2587',
 '2588',
 '2593',
 '2594',
 '2598',
 '2610',
 '2614',
 '2617',
 '2618',
 '2620',
 '2621',
 '2622',
 '2626',
 '2634',
 '2635',
 '2637',
 '2638',
 '2639',
 '2642',
 '2653',
 '2654',
 '2655',
 '2680',
 '2694',
 '2695',
 '2696',
 '2714',
 '2723',
 '2730',
 '2736',
 '2741',
 '2743',
 '2744',
 '2748',
 '2780',
 '2815',
 '2817',
 '2819',
 '2823',
 '2850',
 '2851',
 '2852',
 '2853',
 '2854',
 '2855',
 '2856',
 '2871',
 '2873',
 '2875',
 '2876',
 '2877',
 '2902',
 '2903',
 '2904',
 '2905',
 '2909',
 '2910',
 '2920',
 '2921',
 '2922',
 '2926',
 '2950',
 '2951',
 '2952',
 '2972',
 '3001',
 '3002',
 '3003',
 '3004',
 '3005',
 '3006',
 '3007',
 '3008',
 '3009',
 '3010',
 '3020',
 '3021',
 '3022',
 '3023',
 '3024',
 '3026',
 '3027',
 '3028',
 '3029',
 '3030',
 '3031',
 '3032',
 '3033',
 '3034',
 '3035',
 '3036',
 '3037',
 '3038',
 '3039',
 '3040',
 '3041',
 '3043',
 '3044',
 '3045',
 '3046',
 '3048',
 '3049',
 '3062',
 '3063',
 '3065',
 '3066',
 '3068',
 '3069',
 '3070',
 '3139',
 '3176',
 '3183',
 '3184',
 '3185',
 '3186',
 '3187',
 '3188',
 '3189',
 '3190',
 '3191',
 '3192',
 '3193',
 '3194',
 '3195',
 '3228',
 '3245',
 '3297',
 '3298',
 '3299',
 '3300',
 '3307',
 '3308',
 '3326',
 '3403',
 '3404',
 '3436',
 '3455',
 '3456',
 '3460',
 '3464',
 '3470',
 '3471',
 '3474',
 '3475',
 '3479',
 '3482',
 '3483',
 '3489',
 '3490',
 '3581',
 '3582',
 '3585',
 '3586',
 '3587',
 '3614',
 '3622',
 '3623',
 '3624',
 '3625',
 '3626',
 '3629',
 '3633',
 '3634',
 '3639',
 '3640',
 '3641',
 '3644',
 '3647',
 '3648',
 '3649',
 '3650',
 '3659',
 '3660',
 '3665',
 '3666',
 '3673',
 '3675',
 '3676',
 '3678',
 '3679',
 '3680',
 '3685',
 '3688',
 '3700',
 '3701',
 '3702',
 '3703',
 '3705',
 '3706',
 '3707',
 '3708',
 '3709',
 '3710',
 '3711',
 '3729',
 '3730',
 '3736',
 '3737',
 '3738',
 '3741',
 '3743',
 '3747',
 '3754',
 '3755',
 '3778',
 '3787',
 '3788']
path = Path(__file__).parent

app = Starlette()
app.add_middleware(CORSMiddleware, allow_origins=['*'], allow_headers=['X-Requested-With', 'Content-Type'])
app.mount('/static', StaticFiles(directory='app/static'))


async def download_file(url, dest):
    if dest.exists(): return
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.read()
            with open(dest, 'wb') as f:
                f.write(data)


async def setup_learner():
    await download_file(export_file_url, path / export_file_name)
    try:
        learn = load_learner(path, export_file_name)
        return learn
    except RuntimeError as e:
        if len(e.args) > 0 and 'CPU-only machine' in e.args[0]:
            print(e)
            message = "\n\nThis model was trained with an old version of fastai and will not work in a CPU environment.\n\nPlease update the fastai library in your training environment and export your model again.\n\nSee instructions for 'Returning to work' at https://course.fast.ai."
            raise RuntimeError(message)
        else:
            raise


loop = asyncio.get_event_loop()
tasks = [asyncio.ensure_future(setup_learner())]
learn = loop.run_until_complete(asyncio.gather(*tasks))[0]
loop.close()


@app.route('/')
async def homepage(request):
    html_file = path / 'view' / 'index.html'
    return HTMLResponse(html_file.open().read())


@app.route('/analyze', methods=['POST'])
async def analyze(request):
    img_data = await request.form()
    img_bytes = await (img_data['file'].read())
    img = open_image(BytesIO(img_bytes))
    prediction = learn.predict(img)[0]
    return JSONResponse({'result': str(prediction)})


if __name__ == '__main__':
    if 'serve' in sys.argv:
        uvicorn.run(app=app, host='0.0.0.0', port=5000, log_level="info")
